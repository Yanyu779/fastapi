# 阿里云服务器手动部署命令
# 请在你的服务器控制台中逐步执行以下命令

# 1. 检查系统信息
echo "🚀 开始部署Flask + React全栈项目"
uname -a
cat /etc/os-release

# 2. 更新系统
yum update -y

# 3. 安装基础依赖
yum install -y git curl wget vim python3 python3-pip

# 4. 安装Node.js (ARM64版本)
curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
yum install -y nodejs

# 5. 安装Docker
curl -fsSL https://get.docker.com | sh
systemctl start docker
systemctl enable docker

# 6. 安装Docker Compose (ARM64)
curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-linux-aarch64" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# 7. 克隆项目
cd /opt
git clone https://github.com/Yanyu779/flask-react-fullstack.git
cd flask-react-fullstack

# 8. 创建ARM64 Dockerfile (后端)
cat > backend/Dockerfile.arm64 << 'EOF'
FROM python:3.9-slim
RUN apt-get update && apt-get install -y gcc && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
EXPOSE 5000
CMD ["python", "run.py"]
EOF

# 9. 创建ARM64 Dockerfile (前端)
cat > frontend/Dockerfile.arm64 << 'EOF'
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
RUN npm run build
EXPOSE 3000
CMD ["npm", "start"]
EOF

# 10. 创建Docker Compose配置
cat > docker-compose.arm64.yml << 'EOF'
version: '3.8'
services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.arm64
    restart: always
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=sqlite:///app.db
    volumes:
      - ./backend/instance:/app/instance

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.arm64
    restart: always
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://8.140.211.70:5000/api
    depends_on:
      - backend

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
EOF

# 11. 创建Nginx配置
cat > nginx.conf << 'EOF'
events {
    worker_connections 1024;
}
http {
    upstream backend {
        server backend:5000;
    }
    upstream frontend {
        server frontend:3000;
    }
    server {
        listen 80;
        server_name 8.140.211.70;
        location /api {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}
EOF

# 12. 配置环境变量
cat > .env.production << 'EOF'
FLASK_ENV=production
SECRET_KEY=your-secret-key-here-change-this
DATABASE_URL=sqlite:///app.db
REACT_APP_API_URL=http://8.140.211.70/api
EOF

# 13. 启动服务
docker-compose -f docker-compose.arm64.yml up --build -d

# 14. 配置防火墙
if command -v firewall-cmd &> /dev/null; then
    firewall-cmd --permanent --add-port=80/tcp
    firewall-cmd --permanent --add-port=443/tcp
    firewall-cmd --permanent --add-port=22/tcp
    firewall-cmd --reload
fi

# 15. 等待服务启动
sleep 30

# 16. 检查服务状态
docker-compose -f docker-compose.arm64.yml ps

# 17. 测试服务
curl http://localhost:5000/api/users
curl http://localhost:80

echo "🎉 部署完成!"
echo "访问地址: http://8.140.211.70"
echo "API地址: http://8.140.211.70/api/users"